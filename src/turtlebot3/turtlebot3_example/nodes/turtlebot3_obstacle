#!/usr/bin/env python


import rospy
import math
from sensor_msgs.msg import LaserScan # LaserScan 메시지 타입 임포트
from geometry_msgs.msg import Twist # Twist 메시지 타입 임포트

LINEAR_VEL = 0.22 # 직진 속도 상수 선언
STOP_DISTANCE = 0.2 # 멈출 거리 상수 선언
LIDAR_ERROR = 0.05 # 라이다 오차 상수 선언
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR # 안전한 멈춤 거리 계산

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1) # cmd_vel 토픽에 Twist 메시지를 발행하는 Publisher 객체 생성
        self.obstacle()
        
    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)  # 'scan' 토픽으로부터 LaserScan 메시지를 받아옴
        scan_filter = []
       
        samples = len(scan.ranges)  # 샘플 수는 turtlebot3_<model>.gazebo.xacro 파일에서 정의되며, 기본값은 360
                                    # <model>은 사용하는 TurtleBot3 모델 이름에 따라 달라짐
                                    
                                    # <arg name="fov" default="180"/>  //총 각도
                                    # <arg name="samples" default="360"/> //1도당 샘플수
                                    # 180*360 = 64800개 총샘플수
                                   
        samples_view = 1            # 1 <= samples_view <= samples
        
        if samples_view > samples:  # samples_view가 샘플 수보다 크면
            samples_view = samples  # samples_view는 샘플 수로 설정

        if samples_view is 1: # samples_view가 1이면
            scan_filter.append(scan.ranges[0]) # 첫 번째 샘플만 scan_filter 리스트에 추가

        else:  # samples_view가 1이 아니면
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2) # 왼쪽 샘플 인덱스 범위 계산
            right_lidar_samples_ranges = samples_view//2 # 오른쪽 샘플 인덱스 범위 계산
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:] # 왼쪽 샘플 거리값 리스트
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges] # 오른쪽 샘플 거리값 리스트
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'): # 라이다에서 거리가 측정되지 않은 영역을 나타내는 값이 Inf이므로
                scan_filter[i] = 3.5 # Inf 값을 3.5로 대체
            elif math.isnan(scan_filter[i]): # 거리값이 NaN(Not a Number)일 경우
                scan_filter[i] = 0 # NaN 값을 0으로 대체
        
        return scan_filter

    def obstacle(self):
        twist = Twist() # Twist 메시지 타입 객체 생성
        turtlebot_moving = True # TurtleBot이 움직이고 있는지 여부를 저장하는 변수 초기값 설정

        while not rospy.is_shutdown(): # 노드가 종료될 때까지 반복
            lidar_distances = self.get_scan() # 라이다로부터 거리값 리스트를 받아옴
            min_distance = min(lidar_distances) # 가장 가까운 거리값 계산

            if min_distance < SAFE_STOP_DISTANCE: # 가장 가까운 거리값이 안전한 멈춤 거리 이하인 경우
                if turtlebot_moving: # TurtleBot이 움직이고 있는 경우
                    twist.linear.x = 0.0 # 직진 속도 0으로 설정
                    twist.angular.z = 0.0 # 회전 속도 0으로 설정
                    self._cmd_pub.publish(twist) # Twist 메시지를 발행하여 TurtleBot을 정지시킴
                    turtlebot_moving = False # TurtleBot이 멈추었으므로 turtlebot_moving 변수를 False로 설정
                    rospy.loginfo('Stop!') # 로그 메시지 출력
            else: # 가장 가까운 거리값이 안전한 멈춤 거리 이상인 경우
                twist.linear.x = LINEAR_VEL # 직진 속도를 상수값으로 설정
                twist.angular.z = 0.0 # 회전 속도 0으로 설정
                self._cmd_pub.publish(twist) # Twist 메시지를 발행하여 TurtleBot을 이동시킴
                turtlebot_moving = True # TurtleBot이 이동중이므로 turtlebot_moving 변수를 True로 설정
                rospy.loginfo('Distance of the obstacle : %f', min_distance) # 로그 메시지 출력

def main():
    rospy.init_node('turtlebot3_obstacle') # 'turtlebot3_obstacle' 노드 초기화
    try:
        obstacle = Obstacle() # Obstacle 클래스 객체 생성
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main() # main 함수 호출

